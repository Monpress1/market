// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// just for testing
model Data {
  id    Int     @id @default(autoincrement())
  title String?
  text  String? @db.Text
}

model Profile {
  id          Int       @id @default(autoincrement())
  dateOfBirth DateTime?
  mobile      String?
  gender      String?
  addressId   Int?
  address     Address?  @relation(fields: [addressId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  email     String   @unique
  username  String?
  full_name String?
  password  String   @db.VarChar(255)
  profile   Profile?

  // available value:
  // user
  // seller
  // admin
  role     String?    @default("user")
  orders   Order[]
  Product  Product[]
  ApiToken ApiToken[]
  cart     cart[]
  Shop     Shop[]
  SubOrder SubOrder[]
  Category Category[]
}

// table ucode for password recovery
model Ucode {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  email       String
  dateExpired DateTime?
}

model ApiToken {
  id     Int    @id @default(autoincrement())
  token  String @unique
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model City {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Address Address[]
}

model State {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Address Address[]
}

model Country {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Address Address[]
}

model Address {
  id          Int           @id @default(autoincrement())
  street      String?
  cityId      Int?
  city        City?         @relation(fields: [cityId], references: [id])
  stateId     Int?
  state       State?        @relation(fields: [stateId], references: [id])
  countryId   Int?
  country     Country?      @relation(fields: [countryId], references: [id])
  zip         String?
  Order       Order[]
  ShopDetails ShopDetails[]
  Profile     Profile[]
}

model Category {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  parentId     Int?
  categoryLink String?
  sortOrder    Int?
  author       User?     @relation(fields: [authorId], references: [id])
  authorId     Int?
  published    Boolean   @default(false)
  name         String    @db.VarChar(255)
  slug         String    @db.VarChar(255)
  products     Product[]
}

model Tag {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  title      String
  ProductTag ProductTag[]
}

model ProductTag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?

  tag   Tag? @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId Int?
}

model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  name        String   @db.VarChar(255)
  price       Int
  stock       Int?
  brand       String?  @db.VarChar(255)
  description String?  @db.Text
  published   Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  shopId      Int?
  shop        Shop?    @relation(fields: [shopId], references: [id], onDelete: Cascade)

  category     Category?      @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  keywords     String?
  OrderItem    OrderItem[]
  ProductImage ProductImage[]
  cart         cart[]
  SubOrderItem SubOrderItem[]
  ProductTag   ProductTag[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

// User can create own shop to selling products
model Shop {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  // subdomain name for store
  domain String?

  // available value:
  // 1: pending
  // 2: approved
  // 3: banned
  // 4: disabled
  status       String?       @default("pending")
  // available value:
  // 1: active
  // 2: deactive
  sellerStatus String?       @default("active")
  ShopDetails  ShopDetails[]
  Product      Product[]
}

// contains shop details
model ShopDetails {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  displayName String?
  name        String?
  phone       String?
  email       String?
  description String?  @db.Text
  logo        String?
  shopId      Int?
  Shop        Shop?    @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopUrlId   Int?
  shopUrl     ShopUrl? @relation(fields: [shopUrlId], references: [id], onDelete: Cascade)
  addressId   Int?
  address     Address? @relation(fields: [addressId], references: [id], onDelete: Cascade)
}

model ShopUrl {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name        String?
  url         String?
  ShopDetails ShopDetails[]
}

// user order details
model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  orderId      String  @unique
  orderItemId  String
  price        Int
  delivery_fee String?
  discount     String?
  total        String

  // /**
  // * available value:
  // * COD, ONLINE_PAYMENT
  // */
  paymentMode   String
  // /**
  // * available value:
  // * NOT_PAID, PAID
  // */
  paymentStatus String

  // /**
  // * available value:
  // *
  // * 'order_placed',
  // * 'order_confirmed',
  // * 'order_picked',
  // * 'order_on_way',
  // * 'order_delivered',
  // * 'order_returned',
  // * 'order_cancelled',
  // * 'order_paused'
  // */
  status    String?
  comment   String?  @db.Text
  addressId Int?
  address   Address? @relation(fields: [addressId], references: [id])

  user             User?           @relation(fields: [userId], references: [id])
  userId           Int?
  OrderItem        OrderItem[]
  PaymentDetails   PaymentDetails? @relation(fields: [paymentDetailsId], references: [id])
  paymentDetailsId Int?
  SubOrder         SubOrder[]
}

// Order item
model OrderItem {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  quantity    Int
  price       Int
  orderItemId String
  product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  order       Order?   @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  orderId     String
  shopOrderId Int?
}

// this sub order table for seller order
model SubOrder {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  order        Order?         @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  orderId      String
  seller       User?          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId     Int
  status       String?
  total        String?
  SubOrderItem SubOrderItem[]
}

// suborder item for seller order
model SubOrderItem {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  quantity   Int
  price      Int
  subOrderId Int?
  subOrder   SubOrder? @relation(fields: [subOrderId], references: [id], onDelete: Cascade)
  product    Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
}

// payment details attach with order details
model PaymentDetails {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  orderId   Int
  amount    Int
  provider  String?
  status    String?
  Order     Order[]
}

model cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  quantity  Int
  product   Product? @relation(fields: [productId], references: [id])
  productId Int
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int
}
