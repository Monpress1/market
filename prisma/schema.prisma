// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// just for testing
model Data {
  id    Int     @id @default(autoincrement())
  title String?
  text  String? @db.Text
}

model Profile {
  id          Int       @id @default(autoincrement())
  dateOfBirth DateTime?
  mobile      String?
  gender      String?
  addressId   Int?
  address     Address?  @relation(fields: [addressId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique
}

// model AuthProvider {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now())

//   // values: google, facebook
//   provider   String?
//   // google id, or facebook id here
//   providerId String?

//   user   User? @relation(fields: [userId], references: [id])
//   userId Int?
// }

model User {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  emailVerifiedAt DateTime?

  email    String?  @unique
  username String?
  lname    String?
  fname    String?
  password String?
  profile  Profile?

  // values: google, facebook
  provider   String?
  // google id, or facebook id here
  providerId String?
  // available value:
  // user
  // seller
  // admin
  role       String?    @default("user")
  orders     Order[]
  Product    Product[]
  ApiToken   ApiToken[]
  cart       cart[]
  Shop       Shop[]
  SubOrder   SubOrder[]
  Category   Category[]
}

// table ucode for password recovery
model Ucode {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  email       String
  dateExpired DateTime?
}

model ApiToken {
  id     Int    @id @default(autoincrement())
  token  String @unique
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}

model City {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Address Address[]
}

model State {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Address Address[]
}

model Country {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Address Address[]
}

model Address {
  id          Int           @id @default(autoincrement())
  street      String?
  cityId      Int?
  city        City?         @relation(fields: [cityId], references: [id])
  stateId     Int?
  state       State?        @relation(fields: [stateId], references: [id])
  countryId   Int?
  country     Country?      @relation(fields: [countryId], references: [id])
  zip         String?
  Order       Order[]
  ShopDetails ShopDetails[]
  Profile     Profile[]
}

model Category {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  parentId     Int?
  categoryLink String?
  sortOrder    Int?
  author       User?     @relation(fields: [authorId], references: [id])
  authorId     Int?
  published    Boolean   @default(false)
  name         String    @db.VarChar(255)
  slug         String    @db.VarChar(255)
  products     Product[]
}

model Tag {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  title      String
  ProductTag ProductTag[]
}

model ProductTag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?

  tag   Tag? @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId Int?
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  optionSet   OptionSet? @relation(fields: [optionSetId], references: [id])
  optionSetId Int?

  name String  @db.VarChar(255)
  slug String? @db.VarChar(255)

  // SEO
  metaTitle       String? @db.Text
  metaDescription String? @db.Text // max limit 320
  metaKeyword     String? @db.Text

  defaultVariant           Int?    @default(0)
  isSale                   Int?    @default(0)
  price                    Decimal
  quantity                 Int?
  trackQuantity            Int?    @default(1)
  allowOutOfStockPurchases Int?    @default(0)
  brand                    String? @db.VarChar(255)
  description              String? @db.Text
  published                Boolean @default(true)
  author                   User    @relation(fields: [authorId], references: [id])
  authorId                 Int
  shopId                   Int?
  shop                     Shop?   @relation(fields: [shopId], references: [id], onDelete: Cascade)

  category       Category?        @relation(fields: [categoryId], references: [id])
  categoryId     Int?
  keywords       String?
  OrderItem      OrderItem[]
  ProductImage   ProductImage[]
  cart           cart[]
  SubOrderItem   SubOrderItem[]
  ProductTag     ProductTag[]
  ProductVariant ProductVariant[]
}

model ProductVariant {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  productId Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  price               Decimal?
  discount            Decimal?
  quantity            Int?
  sku                 Int?
  barcode             String?
  status              Int?                  @default(0)
  sortOrder           Int?                  @default(0)
  ProductVariantImage ProductVariantImage[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  url       String?
  altText   String?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  status    Int?    @default(0)
  sortOrder Int?    @default(0)
}

model ProductVariantImage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  url              String?
  altText          String?
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId Int
  status           Int?           @default(0)
  sortOrder        Int?           @default(0)
}

// Custom option set
model OptionSet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  shopId Int?
  shop   Shop? @relation(fields: [shopId], references: [id], onDelete: Cascade)

  name             String?            @db.VarChar(255)
  description      String?            @db.Text
  status           Int?               @default(0)
  sortOrder        Int?               @default(0)
  OptionSetElement OptionSetElement[]
  Product          Product[]
}

// Custom option set item
model OptionSetElement {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  optionSetId Int?
  optionSet   OptionSet? @relation(fields: [optionSetId], references: [id], onDelete: Cascade)

  // available values:
  // text, select, textarea
  type        String? @db.VarChar(255)
  // ----general----
  label       String? @db.VarChar(255)
  name        String? @db.VarChar(255)
  required    Int?    @default(0)
  style       String? @db.LongText // custom inline css
  placeholder String? @db.Text
  helpText    String? @db.Text
  limit       Int?
  // ----condition----
  // if condition fullfilled then this element will be show up
  // condition format: {action: show/hide, match: all/any,
  // condition:[{element_name:name, condition:condition, value:value}]}
  isCondition Int?    @default(0)
  condition   String? @db.LongText
  // ----select type----
  optionValue String? @db.LongText // option format: [{price:price,value:value,text:text}]

  status    Int? @default(0)
  sortOrder Int? @default(0)
}

// User can create own shop to selling products
model Shop {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  // subdomain name for store
  domain String?

  // available value:
  // 1: pending
  // 2: approved
  // 3: banned
  // 4: disabled
  status       String?       @default("pending")
  // available value:
  // 1: active
  // 2: deactive
  sellerStatus String?       @default("active")
  ShopDetails  ShopDetails[]
  Product      Product[]
  SubOrder     SubOrder[]
  OptionSet    OptionSet[]
}

// contains shop details
model ShopDetails {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  displayName String?
  name        String?
  phone       String?
  email       String?
  description String?  @db.Text
  logo        String?
  shopId      Int?
  Shop        Shop?    @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopUrlId   Int?
  shopUrl     ShopUrl? @relation(fields: [shopUrlId], references: [id], onDelete: Cascade)
  addressId   Int?
  address     Address? @relation(fields: [addressId], references: [id], onDelete: Cascade)
}

model ShopUrl {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  name        String?
  url         String?
  ShopDetails ShopDetails[]
}

// user order details
model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  orderId      String  @unique
  orderItemId  String
  price        Decimal
  delivery_fee String?
  discount     String?
  total        String

  // /**
  // * available value:
  // * COD, ONLINE_PAYMENT
  // */
  paymentMode   String
  // /**
  // * available value:
  // * NOT_PAID, PAID
  // */
  paymentStatus String

  // /**
  // * available value:
  // *
  // * 'order_placed',
  // * 'order_confirmed',
  // * 'order_picked',
  // * 'order_on_way',
  // * 'order_delivered',
  // * 'order_returned',
  // * 'order_cancelled',
  // * 'order_paused'
  // */
  status    String?
  comment   String?  @db.Text
  addressId Int?
  address   Address? @relation(fields: [addressId], references: [id])

  user             User?           @relation(fields: [userId], references: [id])
  userId           Int?
  OrderItem        OrderItem[]
  PaymentDetails   PaymentDetails? @relation(fields: [paymentDetailsId], references: [id])
  paymentDetailsId Int?
  SubOrder         SubOrder[]
}

// Order item
model OrderItem {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  quantity    Int
  price       Decimal
  orderItemId String
  product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  order       Order?   @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  orderId     String
  shopOrderId Int?
}

// this sub order table for seller order
model SubOrder {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  order        Order?         @relation(fields: [orderId], references: [orderId], onDelete: SetNull)
  orderId      String?
  seller       User?          @relation(fields: [sellerId], references: [id], onDelete: SetNull)
  sellerId     Int?
  shopId       Int?
  shop         Shop?          @relation(fields: [shopId], references: [id], onDelete: SetNull)
  status       String?
  total        String?
  SubOrderItem SubOrderItem[]
}

// suborder item for seller order
model SubOrderItem {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  quantity   Int
  price      Decimal
  subOrderId Int?
  subOrder   SubOrder? @relation(fields: [subOrderId], references: [id], onDelete: Cascade)
  product    Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
}

// payment details attach with order details
model PaymentDetails {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  orderId   Int
  amount    Int
  provider  String?
  status    String?
  Order     Order[]
}

model cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  quantity  Int
  product   Product? @relation(fields: [productId], references: [id])
  productId Int
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int
}
