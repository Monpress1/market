// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// just for testing
model Data {
  id    Int     @id @default(autoincrement())
  title String?
  text  String?
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  username  String?
  full_name String?
  password  String     @db.VarChar(255)
  profile   Profile?
  role      String?    @default("user")
  orders    Order[]
  Product   Product[]
  ApiToken  ApiToken[]
  cart      cart[]
  Store     Store[]
}

model ApiToken {
  id     Int    @id @default(autoincrement())
  token  String @unique
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model City {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Address Address[]
}

model State {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Address Address[]
}

model Country {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Address Address[]
}

model Address {
  id           Int            @id @default(autoincrement())
  street       String?
  cityId       Int?
  city         City?          @relation(fields: [cityId], references: [id])
  stateId      Int?
  state        State?         @relation(fields: [stateId], references: [id])
  countryId    Int?
  country      Country?       @relation(fields: [countryId], references: [id])
  zip          String?
  Order        Order[]
  StoreDetails StoreDetails[]
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  name      String    @db.VarChar(255)
  slug      String    @db.VarChar(255)
  products  Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  name        String   @db.VarChar(255)
  price       Int
  stock       Int?
  brand       String?  @db.VarChar(255)
  description String?
  published   Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  storeId     Int?
  store       Store?   @relation(fields: [storeId], references: [id])

  category     Category?      @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  keywords     String?
  OrderItem    OrderItem[]
  ProductImage ProductImage[]
  cart         cart[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String?
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

// User can create own store to selling products
model Store {
  id     Int     @id @default(autoincrement())
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
  Order  Order[]

  // available value
  // 1: pending
  // 2: approved
  // 3: banned
  // 4: disabled
  status       String?        @default("pending")
  StoreDetails StoreDetails[]
  Product      Product[]
}

// contains store details
model StoreDetails {
  id          Int       @id @default(autoincrement())
  displayName String?
  name        String?
  phone       String?
  email       String?
  description String?
  logo        String?
  storeId     Int?
  Store       Store?    @relation(fields: [storeId], references: [id])
  storeUrlId  Int?
  storeUrl    StoreUrl? @relation(fields: [storeUrlId], references: [id])
  addressId   Int?
  address     Address?  @relation(fields: [addressId], references: [id])
}

model StoreUrl {
  id           Int            @id @default(autoincrement())
  name         String?
  url          String?
  StoreDetails StoreDetails[]
}

// Order details
model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  orderId      String  @unique
  orderItemId  String
  price        Int
  delivery_fee String?
  discount     String?
  total        String

  // /**
  // * available value:
  // * COD, ONLINE_PAYMENT
  // */
  paymentMode   String
  // /**
  // * available value:
  // * NOT_PAID, PAID
  // */
  paymentStatus String

  // /**
  // * available value:
  // *
  // * 'order_placed',
  // * 'order_confirmed',
  // * 'order_picked',
  // * 'order_on_way',
  // * 'order_delivered',
  // * 'order_returned',
  // * 'order_cancelled',
  // * 'order_paused'
  // */
  status    String?
  comment   String?
  addressId Int?
  address   Address? @relation(fields: [addressId], references: [id])

  user             User?           @relation(fields: [userId], references: [id])
  userId           Int?
  OrderItem        OrderItem[]
  PaymentDetails   PaymentDetails? @relation(fields: [paymentDetailsId], references: [id])
  paymentDetailsId Int?
  // store
  Store            Store?          @relation(fields: [storeId], references: [id])
  storeId          Int?
  storeDetailsId   Int?
}

// Order item
model OrderItem {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  quantity    Int
  price       Int
  orderItemId String
  product     Product? @relation(fields: [productId], references: [id])
  productId   Int
  order       Order?   @relation(fields: [orderId], references: [orderId])
  orderId     String
}

// payment details attach with order details
model PaymentDetails {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  orderId   Int
  amount    Int
  provider  String?
  status    String?
  Order     Order[]
}

model cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  quantity  Int
  product   Product? @relation(fields: [productId], references: [id])
  productId Int
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int
}
