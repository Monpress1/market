// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// just for testing
model Data {
  id    Int     @id @default(autoincrement())
  title String?
  text  String?
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  username  String?
  full_name String?
  password  String     @db.VarChar(255)
  profile   Profile?
  orders    Order[]
  Address   Address[]
  Product   Product[]
  ApiToken  ApiToken[]
  cart      cart[]
}

model ApiToken {
  id     Int    @id @default(autoincrement())
  token  String @unique
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model Address {
  id      Int     @id @default(autoincrement())
  street  String?
  city    String?
  country String?
  user    User    @relation(fields: [userId], references: [id])
  userId  Int     @unique
  Order   Order[]
}

model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  name        String   @db.VarChar(255)
  price       Int
  stock       Int?
  brand       String?  @db.VarChar(255)
  description String?
  published   Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int

  category     Category?      @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  keywords     String?
  OrderItem    OrderItem?
  ProductImage ProductImage[]
  cart         cart[]
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  name      String    @db.VarChar(255)
  slug      String    @db.VarChar(255)
  products  Product[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String?
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  orderId      String @unique
  orderItemId  String
  price        String
  delivery_fee String
  discount     String
  total        String

  // /**
  // * available value:
  // * COD, ONLINE_PAYMENT
  // */
  paymentMode   String
  // /**
  // * available value:
  // * NOT_PAID, PAID
  // */
  paymentStatus String

  // /**
  // * available value:
  // *
  // * 'order_placed',
  // * 'order_picked',
  // * 'order_on_way',
  // * 'order_delivered',
  // * 'order_cancelled',
  // * 'order_paused'
  // */
  status    String?
  comment   String?
  addressId Int
  address   Address @relation(fields: [addressId], references: [id])

  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  OrderItem OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int      @unique
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
}

model cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  quantity  Int
  product   Product? @relation(fields: [productId], references: [id])
  productId Int
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int
}
